const fs = require('fs-extra');
const path = require('path');
const mime = require('mime');

const Terser = require('terser');
const CleanCSS = require('clean-css');
const HTMLminify = require('html-minifier').minify;

const HTMLMinifySettings = {
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: true,
    collapseWhitespace: true,
    includeAutoGeneratedTags: false,
    minifyCSS: true,
    minifyJS: true,
    minifyURLs: true,
    quoteCharacter: "'",
    removeAttributeQuotes: true,
    removeComments: true,
    removeEmptyAttributes: true,
    removeEmptyElements: true,
    removeOptionalTags: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    removeTagWhitespace: true,
};

import { setOutputType } from '../constants/settings'

export async function compressText(file, options) {
    return new Promise(async (resolve, reject) => {
        try {
            const fileBuffer = await fs.readFile(file);
            const processedFile = await compressTextBuffer(fileBuffer, file, options);
            await fs.writeFile(setOutputType(options, file), processedFile)
                .then(() => resolve("Done"))
        } 
        catch (err) {
            reject(err);
        }
    });
}

export async function compressTextBuffer(buffer, file, options) {
    return new Promise(async (resolve, reject) => {
        try {
            const data = buffer.toString();
            let result;     
            if (mime.getType(file) === "text/html") {
                result = HTMLminify(data, HTMLMinifySettings);
            }
            if (mime.getType(file) === "text/css") {
                result = new CleanCSS({ level: 2 }).minify(data).styles;
            }
            if (mime.getType(file) === "text/javascript" || mime.getType(file) === "application/javascript") {
                console.log("Error:", Terser.minify(data).error)
                result = Terser.minify(data).code;
            }
            resolve(Buffer.from(result));
        } 
        catch (err) {
            reject(err);
        }
    });
}